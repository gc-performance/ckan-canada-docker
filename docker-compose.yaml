services:

  traefik:
    image: traefik:v3.1
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web-secure.address=:443"

      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@${SITE_URL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"

      - "--entrypoints.web.http.redirections.entrypoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      - "--accesslog=true"

    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    restart: unless-stopped

  ckan:
    container_name: ckan
    build: .
    depends_on:
      - postgres
      - solr
      - redis
      - datapusher
    env_file:
      - .env
    ports:
      - "${CKAN_SITE_PORT}:5000"
    volumes:
      ["./service.yaml:/srv/app/src/ckanext-canada/ckanext/canada/tables/service.yaml"]

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ckan.rule=Host(`${SITE_URL}`)"
      - "traefik.http.routers.ckan.entrypoints=web-secure"
      - "traefik.http.routers.ckan.tls.certresolver=letsencrypt"
      - "traefik.http.services.ckan.loadbalancer.server.port=${CKAN_SITE_PORT}"

      - "traefik.http.services.ckan.loadbalancer.healthcheck.path=/api/3/action/status_show"
      - "traefik.http.services.ckan.loadbalancer.healthcheck.interval=10s"
      - "traefik.http.services.ckan.loadbalancer.healthcheck.timeout=3s"
      - "traefik.http.services.ckan.loadbalancer.healthcheck.scheme=http"

    restart: unless-stopped
    command: ./start.sh

  postgres:
    container_name: postgres
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'pg_isready -U $POSTGRES_USER -d $POSTGRES_DB'"]


  solr:
    container_name: solr
    image: opendatacanada/solr
    #image: ckan/ckan-solr:2.9-solr8
    volumes:
      - solr_data:/var/solr/data
    ports:
      - "8983:8983"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:8983/solr/"]


  redis:
    container_name: redis
    image: redis:6-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-e", "QUIT"]

  datapusher:
    container_name: datapusher
    image: ckan/ckan-base-datapusher:0.0.19
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:8800"]

volumes:
  pg_data:
  solr_data:
